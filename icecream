#include <bits/stdc++.h>
#include <unordered_set>

using namespace std;

struct Node {
    int data;
    Node* next;
};

class SetLinkedList {
private:
    Node* head;

public:
    SetLinkedList() {
        head = nullptr;
    }

    void insert(int value) {
        Node* newNode = new Node;
        newNode->data = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    SetLinkedList intersection(SetLinkedList& otherSet) {
        SetLinkedList result;
        unordered_set<int> values;

        Node* temp = head;
        while (temp != nullptr) {
            values.insert(temp->data);
            temp = temp->next;
        }

        temp = otherSet.head;
        while (temp != nullptr) {
            if (values.find(temp->data) != values.end()) {
                result.insert(temp->data);
            }
            temp = temp->next;
        }

        return result;
    }

    SetLinkedList unionSet(SetLinkedList& otherSet) {
        SetLinkedList result = *this;

        Node* temp = otherSet.head;
        while (temp != nullptr) {
            if (!contains(temp->data)) {
                result.insert(temp->data);
            }
            temp = temp->next;
        }

        return result;
    }

    bool contains(int value) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == value) {
                return true;
            }
            temp = temp->next;
        }
        return false;
    }

    int size() {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }
};

int main() {
    SetLinkedList vanilla, butterscotch;

    // Inserting elements into sets
    vanilla.insert(1);
    vanilla.insert(2);
    vanilla.insert(3);

    butterscotch.insert(2);
    butterscotch.insert(3);
    butterscotch.insert(4);

    // Displaying sets
    cout << "Vanilla Set: ";
    vanilla.display();
    cout << "Butterscotch Set: ";
    butterscotch.display();

    // Set of students who like both vanilla and butterscotch
    SetLinkedList intersectionSet = vanilla.intersection(butterscotch);
    cout << "Students who like both Vanilla and Butterscotch: ";
    intersectionSet.display();

    // Set of students who like either vanilla or butterscotch or not both
    SetLinkedList unionSet = vanilla.unionSet(butterscotch);
    cout << "Students who like either Vanilla or Butterscotch or not both: ";
    unionSet.display();

    // Number of students who like neither vanilla nor butterscotch
    int totalStudents = 5; // Total number of students
    int neitherStudents = totalStudents - unionSet.size();
    cout << "Number of students who like neither Vanilla nor Butterscotch: " << neitherStudents << endl;

    return 0;
}
